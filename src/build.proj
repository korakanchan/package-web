<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" DefaultTargets="CreateNugetPackage">
	<Import Project="$(MSBuildProjectDirectory)\lib\GitVersionTask.2.0.0\Build\GitVersionTask.targets" Condition="Exists('$(MSBuildProjectDirectory)\lib\GitVersionTask.2.0.0\Build\GitVersionTask.targets')" />

  <!-- This script will create the Nuget package -->

  <PropertyGroup>
    <SourceRoot Condition=" '$(SourceRoot)'=='' ">$(MSBuildProjectDirectory)\</SourceRoot>
    <OutputRootNoTrailingSlash Condition=" '$(OutputRoot)'=='' ">$(SourceRoot)OutputRoot</OutputRootNoTrailingSlash>
    <OutputRoot Condition=" '$(OutputRoot)'=='' ">$(OutputRootNoTrailingSlash)\</OutputRoot>
    <PackageRoot Condition=" '$(PackageRoot)'=='' ">$(OutputRoot)Nugetpkg\</PackageRoot>
    <NugetExe Condition=" '$(NugetExe)'=='' ">$(SourceRoot).nuget\NuGet.exe</NugetExe>
    <NugetLocalRepo Condition=" '$(NugetLocalRepo)'=='' ">C:\Temp\Nuget\LocalRepo\</NugetLocalRepo>
    <PublishPs1 Condition=" '$(PublishPs1)'=='' ">$(SourceRoot)Publish-Interactive.ps1</PublishPs1>
    <PackageDirectory Condition=" '$(PackageDirectory)'=='' ">_Package</PackageDirectory>
  </PropertyGroup>

  <ItemGroup>
    <!-- This item should never have more than 1 value -->
    <_NugetSpecFile Include="$(SourceRoot)Nuget\Package.nuspec" />
    <ToolsItems Include="$(SourceRoot)Nuget\Install.ps1" />
    <ContentItems Include="$(PublishPs1)">
      <DestDir>$(PackageDirectory)\</DestDir>
    </ContentItems>
    <ContentItems Include="$(SourceRoot)Nuget\Sedodream.Package.targets">
      <DestDir>$(PackageDirectory)\</DestDir>
    </ContentItems>
    <!--<ContentItems Include="$(SourceRoot)Nuget\pw.TransformConfig.proj">
      <DestDir>$(PackageDirectory)\</DestDir>
    </ContentItems>-->
    <!-- TODO: It would be better if these were not checked in. You can use nuget.exe and restore them on the fly -->
    <ContentItems Include="$(SourceRoot)lib\Microsoft.Web.Xdt.1.0.0-alpha\lib\net40\Microsoft.Web.XmlTransform.dll">
      <DestDir>$(PackageDirectory)\</DestDir>
    </ContentItems>
    <ContentItems Include="$(SourceRoot)lib\SlowCheetah.Xdt.1.1.1\lib\SlowCheetah.Xdt.dll">
      <DestDir>$(PackageDirectory)\</DestDir>
    </ContentItems>
    <ContentItems Include="$(SourceRoot)lib\SlowCheetah.Xdt.1.1.1\lib\SlowCheetah.Xdt.exe">
      <DestDir>$(PackageDirectory)\</DestDir>
    </ContentItems>
  </ItemGroup>

  <PropertyGroup>
    <CreateNugetPackageDependsOn>
      CleanAndInitalize;
      PrepareAndPopulateNugetFolder;
      CoreCreateNugetPackage;
    </CreateNugetPackageDependsOn>
  </PropertyGroup>

  <Target Name="CreateNugetPackage" DependsOnTargets="$(CreateNugetPackageDependsOn)" />

  <Target Name="CoreCreateNugetPackage">
	 
	<!-- Calculate the version of PackageWeb using GitVersion -->
	<GetVersion SolutionDirectory="$(SourceRoot)">
		<Output TaskParameter="Major" PropertyName="GfvMajor" />
		<Output TaskParameter="Minor" PropertyName="GfvMinor" />
		<Output TaskParameter="Patch" PropertyName="GfvPatch" />
		<Output TaskParameter="BuildMetaData" PropertyName="GfvBuildMetaData" />
		<Output TaskParameter="FullBuildMetaData" PropertyName="GfvFullBuildMetaData" />
		<Output TaskParameter="BranchName" PropertyName="GfvBranchName" />
		<Output TaskParameter="Sha" PropertyName="GfvSha" />
		<Output TaskParameter="MajorMinorPatch" PropertyName="GfvMajorMinorPatch" />
		<Output TaskParameter="SemVer" PropertyName="GfvSemVer" />
		<Output TaskParameter="LegacySemVer" PropertyName="GfvLegacySemVer" />
		<Output TaskParameter="LegacySemVerPadded" PropertyName="GfvLegacySemVerPadded" />
		<Output TaskParameter="FullSemVer" PropertyName="GfvFullSemVer" />
		<Output TaskParameter="AssemblySemVer" PropertyName="GfvAssemblySemVer" />
		<Output TaskParameter="NuGetVersion" PropertyName="GfvNuGetVersion" />
		<Output TaskParameter="ClassicVersion" PropertyName="GfvClassicVersion" />
		<Output TaskParameter="ClassicVersionWithTag" PropertyName="GfvClassicVersionWithTag" />
		<Output TaskParameter="PreReleaseTag" PropertyName="GfvPreReleaseTag" />
		<Output TaskParameter="PreReleaseTagWithDash" PropertyName="GfvPreReleaseTagWithDash" />
		<Output TaskParameter="InformationalVersion" PropertyName="GfvInformationalVersion" />
	</GetVersion>

	<Message Text="Version: $(GfvFullSemVer)" />
	<Message Text="Generating a prerelease nupkg!" Condition="'$(BuildMetaData)' != '0'" Importance="high" />
	
	<!-- nuget pack "C:\...\Package.nuspec" -NoPackageAnalysis -OutputDirectory "C:\...\Output\" -->
    <PropertyGroup>
      <_NugetSpecFile>%(_NugetSpecOutputFile.FullPath)</_NugetSpecFile>
	  <_NugetVersion Condition="'$(BuildMetaData)' == '0'">$(GfvSemVer)</_NugetVersion>
	  <_NugetVersion Condition="'$(BuildMetaData)' != '0'">$(GfvFullSemVer.Replace("+", "-beta-"))</_NugetVersion>
      <_Cmd>"$(NugetExe)" pack "$(_NugetSpecFile)" -NoPackageAnalysis -OutputDirectory "$(OutputRootNoTrailingSlash)" -Version $(_NugetVersion) </_Cmd>
    </PropertyGroup>

    <Message Text="_Cmd: $(_Cmd)" Importance="low" />
    <Exec Command="$(_Cmd)"/>

    <ItemGroup>
      <_CreatedPackage Include="$(OutputRoot)*.nupkg"/>
    </ItemGroup>

    <Copy SourceFiles="@(_CreatedPackage)"
          DestinationFiles="@(_CreatedPackage->'$(NugetLocalRepo)%(Filename)%(Extension)')"
          Condition="Exists('$(NugetLocalRepo)')"/>
  </Target>
  
  <Target Name="PrepareAndPopulateNugetFolder">
    <MakeDir Directories="$(PackageRoot)content"/>

    <Copy SourceFiles="@(_NugetSpecFile)"
          DestinationFiles="@(_NugetSpecFile->'$(PackageRoot)%(Filename)%(Extension)')">
      <Output ItemName="_NugetSpecOutputFile" TaskParameter="DestinationFiles"/>
    </Copy>

    <Copy SourceFiles="@(ToolsItems)"
          DestinationFiles="@(ToolsItems->'$(PackageRoot)tools\%(Filename)%(Extension)')"/>

    <Copy SourceFiles="@(ContentItems)"
          DestinationFiles="@(ContentItems->'$(PackageRoot)content\%(DestDir)%(Filename)%(Extension)')"/>
    
  </Target>
  
  <Target Name="CleanAndInitalize">
    <MakeDir Directories="$(OutputRoot)"/>
    <MakeDir Directories="$(PackageRoot)"/>
    
    <ItemGroup>
      <_FilesToDelete Remove="@(_FilesToDelete)"/>
      <_FilesToDelete Include="$(OutputRoot)**\*"/>
    </ItemGroup>
    <Delete Files="@(_FilesToDelete)"/>

    <ItemGroup>
      <_FilesToDelete Remove="@(_FilesToDelete)"/>
      <_FilesToDelete Include="$(PackageRoot)**\*"/>
    </ItemGroup>
    <Delete Files="@(_FilesToDelete)"/>
  </Target>

  
  
  <Target Name="CreatePSModuleFromScript">
    <!-- We need to read PublishPs1 for the start/end tags and remove all lines which are outside of that region -->
  </Target>
  
</Project>